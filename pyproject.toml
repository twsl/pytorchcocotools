[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "pytorchcocotools"
version = "0.0.0"
requires-python = ">=3.11"
description = "Unofficial APIs for the MS-COCO dataset using PyTorch"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "twsl", email = "45483159+twsl@users.noreply.github.com" }
]
keywords = [
    "pytorchcocotools"
]
dynamic = [
    "classifiers",
    "dependencies"
]

[project.urls]
homepage = "https://twsl.github.io/pytorchcocotools/"
repository = "https://github.com/twsl/pytorchcocotools"
documentation = "https://twsl.github.io/pytorchcocotools/"

[tool.poetry]
packages = [
    { include = "pytorchcocotools", from = "src" }
]
classifiers = [
]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.11"
bandit = "^1.8.3"
pre-commit = "^4.2.0"
pyright = "^1.1.401"
vulture = "^2.14"
copier = "^9.7.1"
ipykernel = "^6.29.5"
ipywidgets = "^8.1.7"
ipython = "^9.1.0"
jupytext = " ^1.16.6"
nbconvert = "^7.16.6"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"
pytest-cases = "^3.8.6"
pytest-benchmark = "^5.1.0"
pytest-github-actions-annotate-failures = "^0.3.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.14"
mkdocs-git-revision-date-localized-plugin = "^1.4.5"
mkdocs-awesome-pages-plugin = "^2.10.1"
mkdocs-git-authors-plugin = "^0.9.5"
mkapi = "^4.4.0"
markdown-callouts = "^0.4.0"
pygments = "^2.19.0"
mkdocs-jupyter = "^0.25.1"

[tool.poetry.group.debug]
optional = true

[tool.poetry.group.debug.dependencies]
ipdb = "^0.13.9"
line_profiler = "^4.2.0"

[project.scripts]
pytorchcocotools = "pytorchcocotools.cli:main"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"
pattern = "default-unprefixed"

[tool.poetry-dynamic-versioning.substitution]
folders = [
  { path = "src/pytorchcocotools" }
]

[tool.poetry-dynamic-versioning.files."src/pytorchcocotools/__about__.py"]
persistent-substitution = false
initial-content = """
# file generated by poetry dynamic versioning during poetry build/install
# don't change, don't track in version control
__version__ = "0.0.0"
__version_tuple__ = (0, 0, 0)
"""

[tool.pytest.ini_options]
minversion = "8.0"
# https://code.visualstudio.com/docs/python/testing#_pytest-configuration-settings
addopts = "--doctest-glob='test_*.md' --cov=src/pytorchcocotools --cov-config=pyproject.toml"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
]
source_pkgs = ["pytorchcocotools"]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
line-length = 120  # Must agree with Black
extend-include = ["*.ipynb"]
exclude = [
    "migrations",
    "__pycache__",
    "env",
    ".env",
    "venv",
    ".venv",
]

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]
extend-select = [
    "I",
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "TRY002", # Allow default exceptions
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.lint.per-file-ignores]
"test*/**/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "Linux"
include = ["src"]
reportMissingImports = true
reportMissingTypeStubs = false

[tool.vulture]
sort_by_size = true
verbose = false
min_confidence = 100
paths = ["src"]
